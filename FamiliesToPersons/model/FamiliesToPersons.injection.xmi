<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;f&quot;).eClass()).equals(&quot;FamiliesModel.Family.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Female.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;families&quot;).eClass()).equals(&quot;FamiliesModel.Families.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;persons&quot;).eClass()).equals(&quot;PersonsModel.Persons.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;f&quot;).eClass()).equals(&quot;FamiliesModel.Family.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Female.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Male.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Female.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Male.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;f&quot;).eClass()).equals(&quot;FamiliesModel.Family.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Male.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Female.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;fm&quot;, fm);&#xA;match.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;f&quot;).eClass()).equals(&quot;FamiliesModel.Family.&quot;) &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;fm&quot;).eClass()).equals(&quot;FamiliesModel.FamilyMember.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;persons&quot;, persons);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;families2persons&quot;, families2persons);&#xA;ruleresult.registerObject(&quot;persons&quot;, persons);&#xA;ruleresult.registerObject(&quot;familyMember2Persons&quot;, familyMember2Persons);&#xA;ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;fm&quot;, fm);&#xA;ruleresult.registerObject(&quot;families&quot;, families);&#xA;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; org.moflon.util.eMoflonSDMUtil.getFQN(match.getObject(&quot;p&quot;).eClass()).equals(&quot;PersonsModel.Male.&quot;);">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MotherToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;MotherToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MotherToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;MotherToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;var_f_familyName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;f&quot;, &quot;familyName&quot;, var_f_familyName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Families2Persons&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Families2Persons&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DaughterToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;DaughterToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DaughterToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;DaughterToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;var_f_familyName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;f&quot;, &quot;familyName&quot;, var_f_familyName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SonOfExistingFamilyToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;SonOfExistingFamilyToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SonOfExistingFamilyToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;SonOfExistingFamilyToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DaughterOfExistingFamilyToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;DaughterOfExistingFamilyToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;DaughterOfExistingFamilyToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;DaughterOfExistingFamilyToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FatherOfExistingFamilyToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;FatherOfExistingFamilyToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FatherOfExistingFamilyToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;FatherOfExistingFamilyToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FatherToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;FatherToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;FatherToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;FatherToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;var_f_familyName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;f&quot;, &quot;familyName&quot;, var_f_familyName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MotherOfExistingFamilyToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;MotherOfExistingFamilyToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;MotherOfExistingFamilyToFemale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;MotherOfExistingFamilyToFemale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SonToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;SonToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_p_fullName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;p&quot;, &quot;fullName&quot;, var_p_fullName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = org.moflon.tgg.runtime.RuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SonToMale&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;CheckAttributeHelper __helper = new CheckAttributeHelper(__tripleMatch);&#xA;&#xA;&#xA;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(__helper.getValue(&quot;fm&quot;, &quot;firstName&quot;));&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal&quot;, true, csp);&#xD;&#xA;var_literal0.setValue(&quot;, &quot;);&#xD;&#xA;var_literal0.setType(&quot;&quot;);&#xA;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(__helper.getValue(&quot;f&quot;, &quot;familyName&quot;));&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xA;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(__helper.getValue(&quot;p&quot;, &quot;fullName&quot;));&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xA;&#xA;Concat concat0 = new Concat();&#xD;&#xA;csp.getConstraints().add(concat0);&#xA;&#xA;concat0.setRuleName(&quot;SonToMale&quot;);&#xD;&#xA;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_fm_firstName.setBound(false);&#xD;&#xA;&#x9;var_f_familyName.setBound(false);&#xD;&#xA;&#x9;concat0.solve(var_literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;fm&quot;, &quot;firstName&quot;, var_fm_firstName.getValue());&#xD;&#xA;&#x9;&#x9;__helper.setValue(&quot;f&quot;, &quot;familyName&quot;, var_f_familyName.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, true, csp);&#xD;&#xA;var_fm_firstName.setValue(fm.getFirstName());&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, true, csp);&#xD;&#xA;var_p_fullName.setValue(p.getFullName());&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fm&quot;,fm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, true, csp);&#xD;&#xA;var_f_familyName.setValue(f.getFamilyName());&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;, &quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_f_familyName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;f.familyName&quot;, csp);&#xD;&#xA;var_f_familyName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_fm_firstName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;fm.firstName&quot;, csp);&#xD;&#xA;var_fm_firstName.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_fullName = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.fullName&quot;, csp);&#xD;&#xA;var_p_fullName.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Concat concat = new Concat();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(concat);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;concat.setRuleName(&quot;&quot;);&#xD;&#xA;concat.solve(literal0,var_f_familyName,var_fm_firstName,var_p_fullName);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;families2persons&quot;,families2persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;persons&quot;,persons);&#xD;&#xA;isApplicableMatch.registerObject(&quot;families&quot;,families);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.language.csp.*">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/Families2Persons"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/DaughterOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherOfExistingFamilyToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/FatherToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/MotherOfExistingFamilyToFemale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.runtime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.tgg.algorithm.delta.attribute.CheckAttributeHelper">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
  <importInjectionEntries content="SDMLanguage.expressions.ComparingOperator">
    <eClass href="platform:/plugin/FamiliesToPersons/model/FamiliesToPersons.ecore#//Rules/SonToMale"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
